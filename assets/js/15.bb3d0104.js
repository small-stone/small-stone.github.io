(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{413:function(a,t,v){"use strict";v.r(t);var e=v(56),s=Object(e.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"js-代码是怎么执行的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#js-代码是怎么执行的"}},[a._v("#")]),a._v(" js 代码是怎么执行的？")]),a._v(" "),v("p",[a._v("其主要核心流程分为编译和执行两步。首先需要将 JavaScript 代码转换为低级中间代码或者机器能够理解的机器代码，然后再执行转换后的代码并输出执行结果。 "),v("img",{attrs:{src:"https://static001.geekbang.org/resource/image/b7/bf/b77593de2fc7754d146e1218c45ef2bf.jpg",alt:""}})]),a._v(" "),v("p",[a._v("所以对于 JavaScript 代码来说，V8 就是它的整个世界，当 V8 执行 JavaScript 代码时，你并不需要担心现实中不同操作系统的差异，也不需要担心不同体系结构计算机的差异，你只需要按照虚拟机的规范写好代码就可以了。")]),a._v(" "),v("h2",{attrs:{id:"cpu-是怎么执行代码的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#cpu-是怎么执行代码的"}},[a._v("#")]),a._v(" CPU 是怎么执行代码的？")]),a._v(" "),v("p",[a._v("我们可以通过二进制的指令和 CPU 进行沟通，比如我们给 CPU 发出“1000100111011000”的二进制指令，这条指令的意思是将一个寄存器中的数据移动到另外一个寄存器中，当处理器执行到这条指令的时候，便会按照指令的意思去实现相关的操作。")]),a._v(" "),v("p",[a._v("为了能够完成复杂的任务，工程师们为 CPU 提供了一大堆指令，来实现各种功能，我们就把这一大堆指令称为指令集（Instructions），也就是机器语言。二进制代码难以阅读和记忆，于是我们又将二进制指令集转换为人类可以识别和记忆的符号，这就是汇编指令集，你可以参考下面的代码：")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[a._v("1000100111011000  机器指令\nmov ax,bx         汇编指令\n")])])]),v("p",[v("img",{attrs:{src:"https://static001.geekbang.org/resource/image/6b/1f/6bb6d19ec37ea1a7d2cab2a25ea62b1f.jpg",alt:""}}),a._v(" 虽然汇编语言对机器语言做了一层抽象，减少了程序员理解机器语言的复杂度，但是汇编语言依然是复杂且繁琐的，即便你写一个非常简单的功能，也需要实现大量的汇编代码")]),a._v(" "),v("ol",[v("li",[a._v("不同的 CPU 有着不同的指令集")]),a._v(" "),v("li",[a._v("在编写汇编代码时，我们还需要了解和处理器架构相关的硬件知识")])]),a._v(" "),v("p",[a._v("因此我们需要一种屏蔽了计算机架构细节的语言，能适应多种不同 CPU 架构的语言，能专心处理业务逻辑的语言，诸如 C、C++、Java、C#、Python、JavaScript 等，这些“高级语言”就应运而生了。")]),a._v(" "),v("p",[a._v("和汇编语言一样，处理器也不能直接识别由高级语言所编写的代码，那怎么办呢？通常，要有两种方式来执行这些代码。")]),a._v(" "),v("ol",[v("li",[a._v("解释执行。需要先将输入的源代码通过解析器编译成中间代码，之后直接使用解释器解释执行中间代码，然后直接输出结果。具体流程如下图所示： "),v("img",{attrs:{src:"https://static001.geekbang.org/resource/image/33/5e/330ad69589d898f6609dfc083bfbe95e.jpg",alt:""}})]),a._v(" "),v("li",[a._v("第二种是编译执行。采用这种方式时，也需要先将源代码转换为中间代码，然后我们的编译器再将中间代码编译成机器代码。通常编译成的机器代码是以二进制文件形式存储的，需要执行这段程序的时候直接执行二进制文件就可以了。还可以使用虚拟机将编译后的机器代码保存在内存中，然后直接执行内存中的二进制代码。 "),v("img",{attrs:{src:"https://static001.geekbang.org/resource/image/1f/d3/1f933e42e81dacc8f4f2d86e01a914d3.jpg",alt:""}})])]),a._v(" "),v("p",[a._v("V8 并没有采用某种单一的技术，而是混合编译执行和解释执行这两种手段，我们把这种混合使用编译器和解释器的技术称为 JIT（Just In Time）技术。")]),a._v(" "),v("p",[a._v("这是一种权衡策略，因为这两种方法都各自有各自的优缺点，解释执行的启动速度快，但是执行时的速度慢，而编译执行的启动速度慢，但是执行时的速度快。 "),v("img",{attrs:{src:"https://static001.geekbang.org/resource/image/8a/54/8a34ae8c1a7a0f87e19b1384a025e354.jpg",alt:""}}),a._v(" 在 V8 启动执行 JavaScript 之前，它还需要准备执行 JavaScript 时所需要的一些基础环境，这些基础环境包括了“堆空间”“栈空间”“全局执行上下文”“全局作用域”“消息循环系统”“内置函数”等，这些内容都是在执行 JavaScript 过程中需要使用到的")]),a._v(" "),v("p",[a._v("基础环境准备好之后，接下来就可以向 V8 提交要执行的 JavaScript 代码了。首先 V8 会接收到要执行的 JavaScript 源代码，不过这对 V8 来说只是一堆字符串，V8 并不能直接理解这段字符串的含义，它需要结构化这段字符串。")]),a._v(" "),v("p",[a._v("V8 源代码的结构化之后，就生成了抽象语法树 (AST)，我们称为 AST，AST 是便于 V8 理解的结构。在生成 AST 的同时，V8 还会生成相关的作用域，作用域中存放相关变量有了 AST 和作用域之后，接下来就可以生成字节码了，字节码是介于 AST 和机器代码的中间代码。但是与特定类型的机器代码无关，解释器可以直接解释执行字节码，或者通过编译器将其编译为二进制的机器代码再执行。")]),a._v(" "),v("p",[a._v("好了，生成了字节码之后，解释器就登场了，它会按照顺序解释执行字节码，并输出执行结果。")]),a._v(" "),v("p",[a._v("当某段代码被标记为热点代码后，V8 就会将这段字节码丢给优化编译器，优化编译器会在后台将字节码编译为二进制代码，然后再对编译后的二进制代码执行优化操作，优化后的二进制机器代码的执行效率会得到大幅提升。如果下面再执行到这段代码时，那么 V8 会优先选择优化之后的二进制代码，这样代码的执行速度就会大幅提升。")]),a._v(" "),v("p",[a._v("最后，总结一下 js 在 v8 中执行流程：")]),a._v(" "),v("ul",[v("li",[a._v("初始化基础环境；")]),a._v(" "),v("li",[a._v("解析源码生成 AST 和作用域；")]),a._v(" "),v("li",[a._v("依据 AST 和作用域生成字节码；")]),a._v(" "),v("li",[a._v("解释执行字节码；")]),a._v(" "),v("li",[a._v("监听热点代码；")]),a._v(" "),v("li",[a._v("优化热点代码为二进制的机器代码；")]),a._v(" "),v("li",[a._v("反优化生成的二进制机器代码。")])])])}),[],!1,null,null,null);t.default=s.exports}}]);